from typing import Any
import requests
import datetime
from slugify import slugify


def fetchPkgInfo(pkg: str) -> dict[str, Any] | None:
    """
    Query the PyPI API and return all possible information about the latest version of the package.
    """
    url: str = f"https://pypi.org/pypi/{pkg}/json"
    try:
        resp: requests.Response = requests.get(url=url)
        resp.raise_for_status()
        data = resp.json()
        latest_version = data["info"]["version"]
        version_info = data["releases"].get(latest_version, [])
        return {
            "info": data["info"],
            "latest_version": latest_version,
            "release_files": version_info,
            "urls": data.get("urls", []),
        }
    except Exception as e:
        return None


def aurPackageExists(package_name: str) -> bool:
    """
    Check if a package exists in the AUR (Arch User Repository).

    Args:
        package_name (str): The name of the AUR package.

    Returns:
        bool: True if the package exists, False otherwise.
    """
    url = f"https://aur.archlinux.org/rpc/v5/info/{package_name}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data.get("resultcount", 0) > 0
    except requests.RequestException as e:
        print(f"::: Error connecting to AUR API: {e}")
        return False


def appendLinesToFile(file_path: str, lines: list[str]) -> None:
    """
    Append multiple lines to a file.

    Args:
        file_path (str): The path to the file.
        lines (list[str]): The lines to append.
    """
    try:
        with open(file_path, "a") as file:
            for line in lines:
                file.write(line + "\n")

    except IOError as e:
        print(f"::: Error writing to file {file_path}: {e}")


def createPKGBUILD(pypiPackage: str) -> None:
    print(f"::: Creating PKGBUILD for pypi: [{pypiPackage}]...")
    print(f"::: Fetching package info from PyPI...")
    pkg_info = fetchPkgInfo(pypiPackage)
    if pkg_info is None:
        print(f"::: {pypiPackage} does not exist on PyPI.")
    else:
        print(f"::: {pypiPackage} info fetched successfully.")
        print(f"::: {pypiPackage} latest version is {pkg_info['latest_version']}")
        print(f"::: append lines to PKGBUILD...")
        # header
        appendLinesToFile(
            file_path="PKGBUILD",
            lines=[
                "#",
                f"# Generated by pypi2aur from pypi package {pypiPackage}",
                f"# Date {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "#",
            ],
        )
        # body
        appendLinesToFile(
            file_path="PKGBUILD",
            lines=[
                f"pkgname={pypiPackage}",
                f"_origpkgname={slugify(text=pypiPackage, separator="_")}",
                f"pkgver={pkg_info['latest_version']}",
                f"pkgdesc='{pkg_info['info']['summary']}'",
                f"arch=('any')",
                f"url='{pkg_info['info']['home_page']}'",
                f"license=('MIT')",
                f"source=('{pkg_info['urls'][0]['url']}')",
                f"sha256sums=('{pkg_info['urls'][0]['digests']['sha256']}')",
            ],
        )
