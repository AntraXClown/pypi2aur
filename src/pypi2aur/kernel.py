from typing import Any
import requests
import datetime
from slugify import slugify
import sys


def fetchPkgInfo(pkg: str) -> dict[str, Any] | None:
    """
    Query the PyPI API and return all possible information about the latest version of the package.
    """
    url: str = f"https://pypi.org/pypi/{pkg}/json"
    try:
        resp: requests.Response = requests.get(url=url)
        resp.raise_for_status()
        data = resp.json()
        # print(data)
        latest_version = data["info"]["version"]
        version_info = data["releases"].get(latest_version, [])
        return {
            "info": data["info"],
            "latest_version": latest_version,
            "release_files": version_info,
            "urls": data.get("urls", []),
        }
    except Exception as e:
        return None


def appendLinesToFile(file_path: str, lines: list[str]) -> None:
    """
    Append multiple lines to a file.

    Args:
        file_path (str): The path to the file.
        lines (list[str]): The lines to append.
    """
    try:
        with open(file_path, "a") as file:
            for line in lines:
                file.write(line + "\n")

    except IOError as e:
        print(f"::: Error writing to file {file_path}: {e}")


def createPKGBUILD(pypiPackage: str) -> None:
    print(f"::: Creating PKGBUILD for pypi: [{pypiPackage}]...")
    print(f"::: Fetching package info from PyPI...")
    pkg_info = fetchPkgInfo(pypiPackage)
    if pkg_info is None:
        print(f"::: {pypiPackage} does not exist on PyPI.")
    else:
        print(pkg_info["release_files"][1])
        print(f"::: {pypiPackage} info fetched successfully.")
        print(f"::: {pypiPackage} latest version is {pkg_info['latest_version']}")
        # verify if PKGBUILD file exists
        try:
            with open("PKGBUILD", "r") as file:
                print(f"::: PKGBUILD file already exists.")
                print("Exiting...")
                sys.exit(1)
        except FileNotFoundError:
            print(f"::: append lines to PKGBUILD...")
            # header
            appendLinesToFile(
                file_path="PKGBUILD",
                lines=[
                    "#",
                    f"# Generated by pypi2aur from pypi package {pypiPackage}",
                    f"# Date {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                    "#",
                ],
            )
            # body
            appendLinesToFile(
                file_path="PKGBUILD",
                lines=[
                    f"pkgname={pypiPackage}",
                    f"_origpkgname={slugify(text=pypiPackage, separator="_")}",
                    f"pkgver={pkg_info['latest_version']}",
                    f"pkrel=1",
                    f"pkgdesc=\"{pkg_info['info']['summary']}\"",
                    f'arch=("x86_64")',
                    f"url='{pkg_info['info']['project_url']}'",
                    f"license=(\"{pkg_info['info']['license']}\")",
                    "depends=()",
                    "makedepends=(",
                    '\t"python-build"',
                    '\t"python-installer"',
                    '\t"python-wheel"',
                    '\t"python-setuptools"',
                    '\t"python-hatchling"',
                    ")",
                    f"source=(\"{pkg_info["release_files"][1]['url']}\")",
                    f"sha256sums=(\"{pkg_info["release_files"][1]['digests']['sha256']}\")",
                    "package() {",
                    "\t" + 'cd "${_origpkgname}-${pkgver}" || exit',
                    "\t" + "python -m build --wheel --no-isolation",
                    "\t" + 'python -m installer --destdir="$pkgdir" dist/*.whl',
                    "\t"
                    + 'install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE"',
                    "}",
                    "",
                    "# vim:set ts=2 sw=2 et:",
                ],
            )
